# Generated by Django 5.2.7 on 2025-10-24 05:07

from django.db import migrations
from django.contrib.auth.models import User, Group


def setup_rbac_system(apps, schema_editor):
    """Setup RBAC system with default permissions and migrate existing users"""
    
    # Get models
    UserProfile = apps.get_model('inventory', 'UserProfile')
    ModulePermission = apps.get_model('inventory', 'ModulePermission')
    UserPermission = apps.get_model('inventory', 'UserPermission')
    
    # Create default module permissions
    modules = ['cars', 'equipment', 'generic_tables']
    permission_types = ['create', 'read', 'update', 'delete']
    
    print("Creating default module permissions...")
    for module in modules:
        for perm_type in permission_types:
            permission, created = ModulePermission.objects.get_or_create(
                module_name=module,
                permission_type=perm_type,
                defaults={
                    'description': f'{perm_type.title()} {module}'
                }
            )
            if created:
                print(f"Created permission: {module}.{perm_type}")
    
    # Migrate existing users
    print("Migrating existing users...")
    
    # Get all existing users
    all_users = User.objects.all()
    admin_group = Group.objects.filter(name='Admin').first()
    
    for user in all_users:
        # Check if user already has a profile
        if not UserProfile.objects.filter(user_id=user.id).exists():
            # Determine user type based on existing system
            if user.is_superuser:
                user_type = 'super_admin'
                print(f"Migrating superuser: {user.username} -> super_admin")
            elif admin_group and user.groups.filter(name='Admin').exists():
                user_type = 'admin'
                print(f"Migrating admin user: {user.username} -> admin")
            else:
                user_type = 'normal'
                print(f"Migrating normal user: {user.username} -> normal")
            
            # Create user profile
            UserProfile.objects.create(
                user_id=user.id,
                user_type=user_type,
                is_active=user.is_active,
                created_at=user.date_joined
            )
        else:
            print(f"User {user.username} already has a profile, skipping...")
    
    print("RBAC system setup completed successfully!")


def reverse_setup_rbac_system(apps, schema_editor):
    """Reverse the RBAC system setup"""
    
    # Get models
    UserProfile = apps.get_model('inventory', 'UserProfile')
    ModulePermission = apps.get_model('inventory', 'ModulePermission')
    UserPermission = apps.get_model('inventory', 'UserPermission')
    
    print("Reversing RBAC system setup...")
    
    # Delete all user permissions
    UserPermission.objects.all().delete()
    print("Deleted all user permissions")
    
    # Delete all module permissions
    ModulePermission.objects.all().delete()
    print("Deleted all module permissions")
    
    # Delete all user profiles
    UserProfile.objects.all().delete()
    print("Deleted all user profiles")
    
    print("RBAC system reversal completed!")


class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0012_actionlog_loginlog_modulepermission_userprofile_and_more'),
    ]

    operations = [
        migrations.RunPython(
            setup_rbac_system,
            reverse_setup_rbac_system,
            elidable=True
        ),
    ]
